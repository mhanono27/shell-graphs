type Pool @entity {
  # Pool address
  id: ID! 

  # Tokens in pool and their numeraires
  reserves: [Token!]! 
  numeraires: [Token!]! 

  # Total volume
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!

  # Total liquidity
  totalLiquidityUSD: BigDecimal!
  totalLiquidityETH: BigDecimal!

  # Total swap volume
  totalSwapVolume: BigDecimal!

  # Transactions and fees
  txCount: BigInt!
  shellCount: BigInt!
  totalSwapFee: BigDecimal!

  # Parameters
  alpha: BigDecimal!
  beta: BigDecimal!
  delta: BigDecimal!
  epsilon: BigDecimal!
  lambda: BigDecimal!
}


type WeightTracker @entity {
  # Weightracker ID
  id: ID!

  # Timestamp of tracker
  timestamp: BigInt!

  # Weights 
  weights: [BigDecimal!]!

  # Relationship with Pool
  pool: Pool!
}


type Token @entity {
  # Token address
  id: ID!

  # Token attributes 
  symbol: String!
  name: String!
  decimals: BigInt!

  # 
  totalSupply: BigInt!

  # Token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!

  # Transactions of token in pool
  txCount: BigInt!

  # Liquidity in pool of that token
  totalLiquidity: BigDecimal!
}


type User @entity {
  # User address
  id: ID! # Done

  # Positions of liquidity pool token
  shellPositions: ShellPosition! 

  # USD amount swapped by user
  usdSwapped: BigDecimal! 

  # Transactions that belong to that use  r
  txs: [Transaction!]! 
}


type ShellPosition @entity {
  # Position id
  id: ID!

  # Balance of shells per user
  shellBalance: BigDecimal!
  shell: Shell!

  # User with positions
  user: User!
}


type Transaction @entity {
  # Transaction hash
  id: ID! # Done

  # Number of block
  blockNumber: BigInt! # Done

  # Time of transaction
  timeStamp: BigInt! # Done

  # Gas usage and price
  gasUsed: BigInt! # Done
  gasPrice: BigInt! # Done
  
  # Corresponding user and transaction type
  user: User! 
  swaps: [Swap!]!
  deposits: [Deposit!]!
  withdrawals: [Withdrawal!]!
}


type Swap @entity {
  # Figure out
  id: ID!
  timeStamp: BigInt!
  
  # Addresses corresponding to swap
  from: Bytes
  to: Bytes

  # Tokens involded in swap with amounts
  tokens: [Token!]!
  tokenAmountsIn: [BigDecimal!]!
  tokenAmountsOut: [BigDecimal!]!
  tokenAmountNumeraires: [BigDecimal!]

  # Relationship with transaction
  transaction: Transaction!
}


type Deposit @entity {
  # Transaction hash + - + index in mints Transaction array
  id: ID! # Done
  timeStamp: BigInt! # Done

  # Addresses corresponding to deposit
  from: Bytes # Done
  to: Bytes # Done
  
  # Tokens involved in the deposit with amounts
  amounts: [BigDecimal!]! 
  amountsNumeraire: [BigDecimal!]!
  tokens: [Token!]!

  # Liquidity pool shares created and total
  lpShares: BigDecimal
  lpSharesTotal: BigDecimal

  # Check!
  # feeTo: Bytes
  # feeLiquidity: BigDecimal

  # Relationship with transaction
  transaction: Transaction! # Done
}


type Withdrawal @entity {
  # Figure out
  id: ID! # Done
  timeStamp: BigInt! # Done

  # Addresses corresponding to deposit
  from: Bytes # Done
  to: Bytes # Done

  # Tokens involved in the deposit with amounts
  tokens: [Token!]
  liquidity: BigDecimal! # Done
  
  # Check!
  #feeTo: Bytes
  #feeLiquidity: BigDecimal

  # Relationship with transaction
  transaction: Transaction! # Done
}


type Shell @entity {
  # Shell token ID
  id: ID!

  # Shell parameters
  alpha: BigDecimal!
  beta: BigDecimal!
  delta: BigDecimal!
  epsilon: BigDecimal!
  lambda: BigDecimal!
  omega: BigDecimal!

  # Is the shell frozen?
  frozen: Boolean!

  # Liquidity of shells
  liquidity: [BigDecimal!]!

  # Total shells existent
  totalShells: BigDecimal!
  
  # Relationships of shell with transactions, swaps, withdrawals 
  shellPositions: [ShellPosition!]!
  swaps: [Swap!]!
  withdrawals: [Withdrawal!]
  pool: Pool
}
