// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class cERC20 extends ethereum.SmartContract {
  static bind(address: Address): cERC20 {
    return new cERC20("cERC20", address);
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnderlying(account: Address): BigInt {
    let result = super.call(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrow(borrowAmount: BigInt): BigInt {
    let result = super.call("borrow", "borrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(borrowAmount)
    ]);

    return result[0].toBigInt();
  }

  try_borrow(borrowAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrow", "borrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(borrowAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRateCurrent(): BigInt {
    let result = super.call(
      "exchangeRateCurrent",
      "exchangeRateCurrent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateCurrent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateCurrent",
      "exchangeRateCurrent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRateStored(): BigInt {
    let result = super.call(
      "exchangeRateStored",
      "exchangeRateStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateStored",
      "exchangeRateStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCash(): BigInt {
    let result = super.call("getCash", "getCash():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCash(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCash", "getCash():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(mintAmount: BigInt): BigInt {
    let result = super.call("mint", "mint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(mintAmount)
    ]);

    return result[0].toBigInt();
  }

  try_mint(mintAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(mintAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(redeemTokens: BigInt): BigInt {
    let result = super.call("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(redeemTokens)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(redeemTokens: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(redeemTokens)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlying(redeemAmount: BigInt): BigInt {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(redeemAmount)]
    );

    return result[0].toBigInt();
  }

  try_redeemUnderlying(redeemAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(redeemAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayBorrow(repayAmount: BigInt): BigInt {
    let result = super.call("repayBorrow", "repayBorrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(repayAmount)
    ]);

    return result[0].toBigInt();
  }

  try_repayBorrow(repayAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayBorrow",
      "repayBorrow(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(repayAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayBorrowBehalf(borrower: Address, repayAmount: BigInt): BigInt {
    let result = super.call(
      "repayBorrowBehalf",
      "repayBorrowBehalf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayBorrowBehalf(
    borrower: Address,
    repayAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayBorrowBehalf",
      "repayBorrowBehalf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class BalanceOfUnderlyingCall extends ethereum.Call {
  get inputs(): BalanceOfUnderlyingCall__Inputs {
    return new BalanceOfUnderlyingCall__Inputs(this);
  }

  get outputs(): BalanceOfUnderlyingCall__Outputs {
    return new BalanceOfUnderlyingCall__Outputs(this);
  }
}

export class BalanceOfUnderlyingCall__Inputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BalanceOfUnderlyingCall__Outputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecimalsCall extends ethereum.Call {
  get inputs(): DecimalsCall__Inputs {
    return new DecimalsCall__Inputs(this);
  }

  get outputs(): DecimalsCall__Outputs {
    return new DecimalsCall__Outputs(this);
  }
}

export class DecimalsCall__Inputs {
  _call: DecimalsCall;

  constructor(call: DecimalsCall) {
    this._call = call;
  }
}

export class DecimalsCall__Outputs {
  _call: DecimalsCall;

  constructor(call: DecimalsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExchangeRateCurrentCall extends ethereum.Call {
  get inputs(): ExchangeRateCurrentCall__Inputs {
    return new ExchangeRateCurrentCall__Inputs(this);
  }

  get outputs(): ExchangeRateCurrentCall__Outputs {
    return new ExchangeRateCurrentCall__Outputs(this);
  }
}

export class ExchangeRateCurrentCall__Inputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }
}

export class ExchangeRateCurrentCall__Outputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayBorrowCall extends ethereum.Call {
  get inputs(): RepayBorrowCall__Inputs {
    return new RepayBorrowCall__Inputs(this);
  }

  get outputs(): RepayBorrowCall__Outputs {
    return new RepayBorrowCall__Outputs(this);
  }
}

export class RepayBorrowCall__Inputs {
  _call: RepayBorrowCall;

  constructor(call: RepayBorrowCall) {
    this._call = call;
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayBorrowCall__Outputs {
  _call: RepayBorrowCall;

  constructor(call: RepayBorrowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayBorrowBehalfCall extends ethereum.Call {
  get inputs(): RepayBorrowBehalfCall__Inputs {
    return new RepayBorrowBehalfCall__Inputs(this);
  }

  get outputs(): RepayBorrowBehalfCall__Outputs {
    return new RepayBorrowBehalfCall__Outputs(this);
  }
}

export class RepayBorrowBehalfCall__Inputs {
  _call: RepayBorrowBehalfCall;

  constructor(call: RepayBorrowBehalfCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayBorrowBehalfCall__Outputs {
  _call: RepayBorrowBehalfCall;

  constructor(call: RepayBorrowBehalfCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
