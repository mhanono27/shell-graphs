// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("hash", Value.fromString(""));
    this.set("index", Value.fromBigInt(BigInt.zero()));
    this.set("to", Value.fromString(""));
    this.set("gas_used", Value.fromBigInt(BigInt.zero()));
    this.set("gas_price", Value.fromBigInt(BigInt.zero()));
    this.set("trade", Value.fromString(""));
    this.set("deposit", Value.fromString(""));
    this.set("withdrawal", Value.fromString(""));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get from(): string | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(<string>value));
    }
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get gas_used(): BigInt {
    let value = this.get("gas_used");
    return value!.toBigInt();
  }

  set gas_used(value: BigInt) {
    this.set("gas_used", Value.fromBigInt(value));
  }

  get gas_price(): BigInt {
    let value = this.get("gas_price");
    return value!.toBigInt();
  }

  set gas_price(value: BigInt) {
    this.set("gas_price", Value.fromBigInt(value));
  }

  get trade(): string {
    let value = this.get("trade");
    return value!.toString();
  }

  set trade(value: string) {
    this.set("trade", Value.fromString(value));
  }

  get deposit(): string {
    let value = this.get("deposit");
    return value!.toString();
  }

  set deposit(value: string) {
    this.set("deposit", Value.fromString(value));
  }

  get withdrawal(): string {
    let value = this.get("withdrawal");
    return value!.toString();
  }

  set withdrawal(value: string) {
    this.set("withdrawal", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("origin", Value.fromString(""));
    this.set("origin_amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("target", Value.fromString(""));
    this.set("target_amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("parametersSet", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("utility_frame", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Trade entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get origin(): string {
    let value = this.get("origin");
    return value!.toString();
  }

  set origin(value: string) {
    this.set("origin", Value.fromString(value));
  }

  get origin_amount(): BigDecimal {
    let value = this.get("origin_amount");
    return value!.toBigDecimal();
  }

  set origin_amount(value: BigDecimal) {
    this.set("origin_amount", Value.fromBigDecimal(value));
  }

  get origin_amount_numeraire(): BigDecimal | null {
    let value = this.get("origin_amount_numeraire");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set origin_amount_numeraire(value: BigDecimal | null) {
    if (!value) {
      this.unset("origin_amount_numeraire");
    } else {
      this.set(
        "origin_amount_numeraire",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get target(): string {
    let value = this.get("target");
    return value!.toString();
  }

  set target(value: string) {
    this.set("target", Value.fromString(value));
  }

  get target_amount(): BigDecimal {
    let value = this.get("target_amount");
    return value!.toBigDecimal();
  }

  set target_amount(value: BigDecimal) {
    this.set("target_amount", Value.fromBigDecimal(value));
  }

  get target_amount_numeraire(): BigDecimal | null {
    let value = this.get("target_amount_numeraire");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set target_amount_numeraire(value: BigDecimal | null) {
    if (!value) {
      this.unset("target_amount_numeraire");
    } else {
      this.set(
        "target_amount_numeraire",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get parametersSet(): string {
    let value = this.get("parametersSet");
    return value!.toString();
  }

  set parametersSet(value: string) {
    this.set("parametersSet", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get utility_frame(): string {
    let value = this.get("utility_frame");
    return value!.toString();
  }

  set utility_frame(value: string) {
    this.set("utility_frame", Value.fromString(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
    this.set("amounts", Value.fromBigDecimalArray(new Array(0)));
    this.set("amounts_numeraire", Value.fromBigDecimalArray(new Array(0)));
    this.set("tokens", Value.fromStringArray(new Array(0)));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("parametersSet", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("utility_frame", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Deposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get amounts(): Array<BigDecimal> {
    let value = this.get("amounts");
    return value!.toBigDecimalArray();
  }

  set amounts(value: Array<BigDecimal>) {
    this.set("amounts", Value.fromBigDecimalArray(value));
  }

  get amounts_numeraire(): Array<BigDecimal> {
    let value = this.get("amounts_numeraire");
    return value!.toBigDecimalArray();
  }

  set amounts_numeraire(value: Array<BigDecimal>) {
    this.set("amounts_numeraire", Value.fromBigDecimalArray(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get lp_shares(): BigDecimal | null {
    let value = this.get("lp_shares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lp_shares(value: BigDecimal | null) {
    if (!value) {
      this.unset("lp_shares");
    } else {
      this.set("lp_shares", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lp_shares_total(): BigDecimal | null {
    let value = this.get("lp_shares_total");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lp_shares_total(value: BigDecimal | null) {
    if (!value) {
      this.unset("lp_shares_total");
    } else {
      this.set("lp_shares_total", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get parametersSet(): string {
    let value = this.get("parametersSet");
    return value!.toString();
  }

  set parametersSet(value: string) {
    this.set("parametersSet", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get utility_frame(): string {
    let value = this.get("utility_frame");
    return value!.toString();
  }

  set utility_frame(value: string) {
    this.set("utility_frame", Value.fromString(value));
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
    this.set("amounts", Value.fromBigDecimalArray(new Array(0)));
    this.set("tokens", Value.fromStringArray(new Array(0)));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("parametersSet", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("utility_frame", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Withdrawal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get amounts(): Array<BigDecimal> {
    let value = this.get("amounts");
    return value!.toBigDecimalArray();
  }

  set amounts(value: Array<BigDecimal>) {
    this.set("amounts", Value.fromBigDecimalArray(value));
  }

  get amounts_numeraire(): Array<BigDecimal> | null {
    let value = this.get("amounts_numeraire");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set amounts_numeraire(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("amounts_numeraire");
    } else {
      this.set(
        "amounts_numeraire",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value)
      );
    }
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get lp_shares(): BigDecimal | null {
    let value = this.get("lp_shares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lp_shares(value: BigDecimal | null) {
    if (!value) {
      this.unset("lp_shares");
    } else {
      this.set("lp_shares", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lp_shares_total(): BigDecimal | null {
    let value = this.get("lp_shares_total");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lp_shares_total(value: BigDecimal | null) {
    if (!value) {
      this.unset("lp_shares_total");
    } else {
      this.set("lp_shares_total", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get parametersSet(): string {
    let value = this.get("parametersSet");
    return value!.toString();
  }

  set parametersSet(value: string) {
    this.set("parametersSet", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get utility_frame(): string {
    let value = this.get("utility_frame");
    return value!.toString();
  }

  set utility_frame(value: string) {
    this.set("utility_frame", Value.fromString(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserves(): Array<string> | null {
    let value = this.get("reserves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set reserves(value: Array<string> | null) {
    if (!value) {
      this.unset("reserves");
    } else {
      this.set("reserves", Value.fromStringArray(<Array<string>>value));
    }
  }

  get numeraires(): Array<string> | null {
    let value = this.get("numeraires");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set numeraires(value: Array<string> | null) {
    if (!value) {
      this.unset("numeraires");
    } else {
      this.set("numeraires", Value.fromStringArray(<Array<string>>value));
    }
  }

  get parametersSet(): string | null {
    let value = this.get("parametersSet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parametersSet(value: string | null) {
    if (!value) {
      this.unset("parametersSet");
    } else {
      this.set("parametersSet", Value.fromString(<string>value));
    }
  }
}

export class ParametersSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("alpha", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("beta", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("delta", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("epsilon", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("lambda", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("weights", Value.fromBigDecimalArray(new Array(0)));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParametersSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ParametersSet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ParametersSet", id.toString(), this);
    }
  }

  static load(id: string): ParametersSet {
    return changetype<ParametersSet>(store.get("ParametersSet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get alpha(): BigDecimal {
    let value = this.get("alpha");
    return value!.toBigDecimal();
  }

  set alpha(value: BigDecimal) {
    this.set("alpha", Value.fromBigDecimal(value));
  }

  get beta(): BigDecimal {
    let value = this.get("beta");
    return value!.toBigDecimal();
  }

  set beta(value: BigDecimal) {
    this.set("beta", Value.fromBigDecimal(value));
  }

  get delta(): BigDecimal {
    let value = this.get("delta");
    return value!.toBigDecimal();
  }

  set delta(value: BigDecimal) {
    this.set("delta", Value.fromBigDecimal(value));
  }

  get epsilon(): BigDecimal {
    let value = this.get("epsilon");
    return value!.toBigDecimal();
  }

  set epsilon(value: BigDecimal) {
    this.set("epsilon", Value.fromBigDecimal(value));
  }

  get lambda(): BigDecimal {
    let value = this.get("lambda");
    return value!.toBigDecimal();
  }

  set lambda(value: BigDecimal) {
    this.set("lambda", Value.fromBigDecimal(value));
  }

  get weights(): Array<BigDecimal> {
    let value = this.get("weights");
    return value!.toBigDecimalArray();
  }

  set weights(value: Array<BigDecimal>) {
    this.set("weights", Value.fromBigDecimalArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Parameters extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("alpha", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("beta", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("delta", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("epsilon", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("lambda", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("weights", Value.fromBigDecimalArray(new Array(0)));
    this.set("parametersSet", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Parameters entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Parameters entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Parameters", id.toString(), this);
    }
  }

  static load(id: string): Parameters | null {
    return changetype<Parameters | null>(store.get("Parameters", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get alpha(): BigDecimal {
    let value = this.get("alpha");
    return value!.toBigDecimal();
  }

  set alpha(value: BigDecimal) {
    this.set("alpha", Value.fromBigDecimal(value));
  }

  get beta(): BigDecimal {
    let value = this.get("beta");
    return value!.toBigDecimal();
  }

  set beta(value: BigDecimal) {
    this.set("beta", Value.fromBigDecimal(value));
  }

  get delta(): BigDecimal {
    let value = this.get("delta");
    return value!.toBigDecimal();
  }

  set delta(value: BigDecimal) {
    this.set("delta", Value.fromBigDecimal(value));
  }

  get epsilon(): BigDecimal {
    let value = this.get("epsilon");
    return value!.toBigDecimal();
  }

  set epsilon(value: BigDecimal) {
    this.set("epsilon", Value.fromBigDecimal(value));
  }

  get lambda(): BigDecimal {
    let value = this.get("lambda");
    return value!.toBigDecimal();
  }

  set lambda(value: BigDecimal) {
    this.set("lambda", Value.fromBigDecimal(value));
  }

  get weights(): Array<BigDecimal> {
    let value = this.get("weights");
    return value!.toBigDecimalArray();
  }

  set weights(value: Array<BigDecimal>) {
    this.set("weights", Value.fromBigDecimalArray(value));
  }

  get parametersSet(): string {
    let value = this.get("parametersSet");
    return value!.toString();
  }

  set parametersSet(value: string) {
    this.set("parametersSet", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("decimals", Value.fromI32(0));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token {
    return changetype<Token>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class WeightTracker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("weights", Value.fromBigDecimalArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WeightTracker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WeightTracker entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WeightTracker", id.toString(), this);
    }
  }

  static load(id: string): WeightTracker {
    return changetype<WeightTracker>(store.get("WeightTracker", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get weights(): Array<BigDecimal> {
    let value = this.get("weights");
    return value!.toBigDecimalArray();
  }

  set weights(value: Array<BigDecimal>) {
    this.set("weights", Value.fromBigDecimalArray(value));
  }
}

export class UtilityFrame extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UtilityFrame entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UtilityFrame entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UtilityFrame", id.toString(), this);
    }
  }

  static load(id: string): UtilityFrame {
    return changetype<UtilityFrame>(store.get("UtilityFrame", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get count(): BigInt | null {
    let value = this.get("count");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set count(value: BigInt | null) {
    if (!value) {
      this.unset("count");
    } else {
      this.set("count", Value.fromBigInt(<BigInt>value));
    }
  }

  get first(): boolean {
    let value = this.get("first");
    return value!.toBoolean();
  }

  set first(value: boolean) {
    this.set("first", Value.fromBoolean(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (!value) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get preceding_liquidity(): Array<BigDecimal> | null {
    let value = this.get("preceding_liquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set preceding_liquidity(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("preceding_liquidity");
    } else {
      this.set(
        "preceding_liquidity",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value)
      );
    }
  }

  get preceding_parameters(): string | null {
    let value = this.get("preceding_parameters");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set preceding_parameters(value: string | null) {
    if (!value) {
      this.unset("preceding_parameters");
    } else {
      this.set("preceding_parameters", Value.fromString(<string>value));
    }
  }

  get preceding_lp_shares(): BigDecimal | null {
    let value = this.get("preceding_lp_shares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set preceding_lp_shares(value: BigDecimal | null) {
    if (!value) {
      this.unset("preceding_lp_shares");
    } else {
      this.set("preceding_lp_shares", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get proceeding_liquidity(): Array<BigDecimal> | null {
    let value = this.get("proceeding_liquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set proceeding_liquidity(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("proceeding_liquidity");
    } else {
      this.set(
        "proceeding_liquidity",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value)
      );
    }
  }

  get proceeding_parameters(): string | null {
    let value = this.get("proceeding_parameters");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proceeding_parameters(value: string | null) {
    if (!value) {
      this.unset("proceeding_parameters");
    } else {
      this.set("proceeding_parameters", Value.fromString(<string>value));
    }
  }

  get proceeding_lp_shares(): BigDecimal | null {
    let value = this.get("proceeding_lp_shares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set proceeding_lp_shares(value: BigDecimal | null) {
    if (!value) {
      this.unset("proceeding_lp_shares");
    } else {
      this.set("proceeding_lp_shares", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class ParametersSetCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParametersSetCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ParametersSetCounter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ParametersSetCounter", id.toString(), this);
    }
  }

  static load(id: string): ParametersSetCounter | null {
    return changetype<ParametersSetCounter | null>(
      store.get("ParametersSetCounter", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class TransactionCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransactionCounter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransactionCounter", id.toString(), this);
    }
  }

  static load(id: string): TransactionCounter | null {
    return changetype<TransactionCounter | null>(
      store.get("TransactionCounter", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class DepositCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositCounter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositCounter", id.toString(), this);
    }
  }

  static load(id: string): DepositCounter | null {
    return changetype<DepositCounter | null>(store.get("DepositCounter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class WithdrawalCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawalCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WithdrawalCounter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WithdrawalCounter", id.toString(), this);
    }
  }

  static load(id: string): WithdrawalCounter | null {
    return changetype<WithdrawalCounter | null>(
      store.get("WithdrawalCounter", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class TradeCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TradeCounter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TradeCounter", id.toString(), this);
    }
  }

  static load(id: string): TradeCounter | null {
    return changetype<TradeCounter | null>(store.get("TradeCounter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class UtilityTimestamp extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UtilityTimestamp entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UtilityTimestamp entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UtilityTimestamp", id.toString(), this);
    }
  }

  static load(id: string): UtilityTimestamp | null {
    return changetype<UtilityTimestamp | null>(
      store.get("UtilityTimestamp", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UtilityCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UtilityCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UtilityCounter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UtilityCounter", id.toString(), this);
    }
  }

  static load(id: string): UtilityCounter | null {
    return changetype<UtilityCounter | null>(store.get("UtilityCounter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}
